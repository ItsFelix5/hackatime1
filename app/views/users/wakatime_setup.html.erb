<div class="min-h-screen text-white">
  <div class="max-w-6xl mx-auto p-4">
    <div class="text-center mb-4">
      <h1 class="text-4xl font-bold text-primary mb-2">Hackatime Setup</h1>
    </div>
    <div class="bg-dark rounded-lg p-6">
      <div class="flex items-center justify-center gap-3 mb-5">
        <a href="https://github.com/ItsFelix5/Hackatime/releases/latest/download/Hackatime-windows.exe" class="bg-blue hover:bg-cyan text-white border-0 px-4 py-2 rounded transition-colors cursor-pointer">ü™ü Download for Windows</a>
        <a href="https://github.com/ItsFelix5/Hackatime/releases/latest/download/Hackatime-mac" class="bg-blue hover:bg-cyan text-white border-0 px-4 py-2 rounded transition-colors cursor-pointer">üçé Download for MacOS</a>
        <a href="https://github.com/ItsFelix5/Hackatime/releases/latest/download/Hackatime-linux" class="bg-blue hover:bg-cyan text-white border-0 px-4 py-2 rounded transition-colors cursor-pointer">üêß Download for Linux</a>
      </div>

      <p class="text-lg flex items-center">
        Your API key is
        <code class="copy-button bg-darkless px-2 py-1 rounded text-cyan mx-2"><%= @current_user_api_key %></code>
        <button class="copy-button bg-primary hover:bg-red border-0 text-white px-2 py-1 rounded transition-colors cursor-pointer font-semibold" onclick="copy(this)">Copy</button>
      </p>
    </div>

    <div id="advanced" class="bg-dark rounded-lg p-6 mt-2">
      <h3 class="text-2xl font-bold text-purple mb-4">‚öôÔ∏è Custom Setup:</h3>
      <div class="bg-purple/10 border border-purple/30 rounded-lg p-4 mb-4">
        <p class="text-sm">For advanced users who want to manually configure their setup or have specific requirements.</p>
      </div>
      <p class="text-lg mb-4">Create or edit <code class="bg-darkless px-2 py-1 rounded text-cyan">~/.wakatime.cfg</code> with the following content:</p>

      <div class="code-block bg-darkless rounded-lg p-4 mb-6">
        <code class="text-cyan text-sm">[settings]&#10;api_url = <%= api_hackatime_v1_url %>&#10;api_key = <%= @current_user_api_key %>&#10;heartbeat_rate_limit_seconds = 30</code>
        <button class="copy-button bg-primary hover:bg-red border-0 text-white px-6 py-2 rounded transition-colors cursor-pointer font-semibold" onclick="copy(this)">Copy</button>
      </div>

      <p class="text-lg">And install the "Wakatime" extension for all your IDEs.</p>
    </div>

    <div class="mt-2 text-center">
      <div id="heartbeat-status" class="bg-dark rounded-lg p-6 mb-6">
        <p class="text-lg mb-4">Waiting for your first heartbeat...</p>
        <div class="progress-indicator"></div>
      </div>

      <div id="next-step" class="hidden">
        <%= link_to "Next Step", my_wakatime_setup_step_2_path, class: "bg-primary hover:bg-red text-white px-8 py-3 rounded-lg text-lg font-semibold transition-colors" %>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbo:load', function() {
    const statusDiv = document.getElementById('heartbeat-status');
    const nextStepLink = document.getElementById('next-step');
    let checkCount = 0;
    const maxChecks = 60;

    function timeAgoInWords(d) {
      const s = Math.floor((new Date() - new Date(d)) / 1000);
      const m = Math.floor(s / 60);
      const h = Math.floor(m / 60);
      const days = Math.floor(h / 24);

      if (days > 0) {
        return days === 1 ? "1 day ago" : `${days} days ago`;
      } else if (h > 0) {
        return h === 1 ? "1 hour ago" : `${h} hours ago`;
      } else if (m > 0) {
        return m === 1 ? "1 minute ago" : `${m} minutes ago`;
      } else {
        return s === 1 ? "1 second ago" : `${s} seconds ago`;
      }
    }

    function check() {
      fetch('<%= api_v1_my_heartbeats_most_recent_path %>', {
        headers: {
          'Authorization': 'Bearer <%= @current_user_api_key %>'
        }
      })
      .then(response => response.json())
      .then(data => {
        if (data.has_heartbeat) {
          const timeAgo = timeAgoInWords(data.heartbeat.created_at);
          statusDiv.innerHTML = `<p class="text-green text-xl font-bold">‚úÖ Heartbeat received ${timeAgo}! You can proceed to the next step.</p>`;
          nextStepLink.classList.remove('hidden');
          return;
        }
        throw new Error('No heartbeats yet');
      })
      .catch(error => {
        checkCount++;
        if (checkCount >= maxChecks) {
          statusDiv.innerHTML = '<p class="text-red text-lg font-bold">‚ùå No heartbeats detected after 5 minutes.</p>';
          return;
        }
        setTimeout(check, 5000);
      });
    }

    check();
  });

  function copy(button) {
    const codeBlock = button.previousElementSibling;
    const text = codeBlock.textContent;
    navigator.clipboard.writeText(text).then(() => {
      const originalText = button.textContent;
      button.textContent = '‚úÖ Copied!';
      button.classList.add('bg-green');
      button.classList.remove('bg-primary');
      setTimeout(() => {
        button.textContent = originalText;
        button.classList.remove('bg-green');
        button.classList.add('bg-primary');
      }, 2000);
    });
  }
</script>

<style>
  .progress-indicator {
    width: 24px;
    height: 24px;
    border: 3px solid var(--color-darkless);
    border-top: 3px solid var(--color-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  .code-block {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .code-block code {
    flex: 1;
    min-width: 0;
    white-space: pre-wrap;
    word-break: break-all;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    line-height: 1.4;
  }

  .copy-button {
    flex-shrink: 0;
    font-size: 0.875rem;
  }

  @media (max-width: 768px) {
    .code-block {
      flex-direction: column;
      align-items: stretch;
    }

    .code-block code {
      margin-bottom: 1rem;
    }
  }
</style>
